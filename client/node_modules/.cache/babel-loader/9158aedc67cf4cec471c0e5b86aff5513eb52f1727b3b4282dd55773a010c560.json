{"ast":null,"code":"'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftTreeAdapter\r\n * @format\r\n * \r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\n\nvar invariant = require('fbjs/lib/invariant');\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n  while (stack.length) {\n    var _block = stack.pop();\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _extends({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n\n/**\r\n * This adapter is intended to be be used as an adapter to draft tree data\r\n *\r\n * draft state <=====> draft tree state\r\n */\nvar DraftTreeAdapter = {\n  /**\r\n   * Converts from a tree raw state back to  draft raw state\r\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _extends({}, block);\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block);\n      }\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _extends({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n  /**\r\n   * Converts from draft raw state to tree draft state\r\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var lastListDepthCacheRef = {};\n    var transformedBlocks = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n      var treeBlock = _extends({}, block, {\n        children: []\n      });\n      if (!isList) {\n        // reset the cache path\n        lastListDepthCacheRef = {};\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      // update our depth cache reference path\n      lastListDepthCacheRef[depth] = treeBlock;\n\n      // if we are greater than zero we must have seen a parent already\n      if (depth > 0) {\n        var parent = lastListDepthCacheRef[depth - 1];\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0;\n\n        // push nested list blocks\n        parent.children.push(treeBlock);\n        return;\n      }\n\n      // push root list blocks\n      transformedBlocks.push(treeBlock);\n    });\n    return _extends({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","invariant","traverseInDepthOrder","blocks","fn","stack","concat","reverse","_block","pop","children","Array","isArray","process","env","NODE_ENV","isListBlock","block","type","addDepthToChildren","map","child","depth","DraftTreeAdapter","fromRawTreeStateToRawState","draftTreeState","transformedBlocks","newBlock","push","fromRawStateToRawTreeState","draftState","lastListDepthCacheRef","forEach","isList","treeBlock","parent","module","exports"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/draft-js/lib/DraftTreeAdapter.js"],"sourcesContent":["'use strict';\r\n\r\nvar _assign = require('object-assign');\r\n\r\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftTreeAdapter\r\n * @format\r\n * \r\n *\r\n * This is unstable and not part of the public API and should not be used by\r\n * production systems. This file may be update/removed without notice.\r\n */\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\r\n  var stack = [].concat(blocks).reverse();\r\n  while (stack.length) {\r\n    var _block = stack.pop();\r\n\r\n    fn(_block);\r\n\r\n    var children = _block.children;\r\n\r\n    !Array.isArray(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\r\n\r\n    stack = stack.concat([].concat(children.reverse()));\r\n  }\r\n};\r\n\r\nvar isListBlock = function isListBlock(block) {\r\n  if (!(block && block.type)) {\r\n    return false;\r\n  }\r\n  var type = block.type;\r\n\r\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\r\n};\r\n\r\nvar addDepthToChildren = function addDepthToChildren(block) {\r\n  if (Array.isArray(block.children)) {\r\n    block.children = block.children.map(function (child) {\r\n      return child.type === block.type ? _extends({}, child, { depth: (block.depth || 0) + 1 }) : child;\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * This adapter is intended to be be used as an adapter to draft tree data\r\n *\r\n * draft state <=====> draft tree state\r\n */\r\nvar DraftTreeAdapter = {\r\n  /**\r\n   * Converts from a tree raw state back to  draft raw state\r\n   */\r\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\r\n    var blocks = draftTreeState.blocks;\r\n\r\n    var transformedBlocks = [];\r\n\r\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\r\n\r\n    if (!Array.isArray(blocks) || !blocks.length) {\r\n      return draftTreeState;\r\n    }\r\n\r\n    traverseInDepthOrder(blocks, function (block) {\r\n      var newBlock = _extends({}, block);\r\n\r\n      if (isListBlock(block)) {\r\n        newBlock.depth = newBlock.depth || 0;\r\n        addDepthToChildren(block);\r\n      }\r\n\r\n      delete newBlock.children;\r\n\r\n      transformedBlocks.push(newBlock);\r\n    });\r\n\r\n    draftTreeState.blocks = transformedBlocks;\r\n\r\n    return _extends({}, draftTreeState, {\r\n      blocks: transformedBlocks\r\n    });\r\n  },\r\n\r\n\r\n  /**\r\n   * Converts from draft raw state to tree draft state\r\n   */\r\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\r\n    var lastListDepthCacheRef = {};\r\n    var transformedBlocks = [];\r\n\r\n    draftState.blocks.forEach(function (block) {\r\n      var isList = isListBlock(block);\r\n      var depth = block.depth || 0;\r\n      var treeBlock = _extends({}, block, {\r\n        children: []\r\n      });\r\n\r\n      if (!isList) {\r\n        // reset the cache path\r\n        lastListDepthCacheRef = {};\r\n        transformedBlocks.push(treeBlock);\r\n        return;\r\n      }\r\n\r\n      // update our depth cache reference path\r\n      lastListDepthCacheRef[depth] = treeBlock;\r\n\r\n      // if we are greater than zero we must have seen a parent already\r\n      if (depth > 0) {\r\n        var parent = lastListDepthCacheRef[depth - 1];\r\n\r\n        !parent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid depth for RawDraftContentBlock') : invariant(false) : void 0;\r\n\r\n        // push nested list blocks\r\n        parent.children.push(treeBlock);\r\n        return;\r\n      }\r\n\r\n      // push root list blocks\r\n      transformedBlocks.push(treeBlock);\r\n    });\r\n\r\n    return _extends({}, draftState, {\r\n      blocks: transformedBlocks\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = DraftTreeAdapter;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}