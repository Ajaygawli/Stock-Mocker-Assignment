{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnInput\r\n * @format\r\n * \r\n */\n\n'use strict';\n\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar DraftOffsetKey = require('./DraftOffsetKey');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar isGecko = UserAgent.isEngine('Gecko');\nvar DOUBLE_NEWLINE = '\\n\\n';\n\n/**\r\n * This function is intended to handle spellcheck and autocorrect changes,\r\n * which occur in the DOM natively without any opportunity to observe or\r\n * interpret the changes before they occur.\r\n *\r\n * The `input` event fires in contentEditable elements reliably for non-IE\r\n * browsers, immediately after changes occur to the editor DOM. Since our other\r\n * handlers override or otherwise handle cover other varieties of text input,\r\n * the DOM state should match the model in all controlled input cases. Thus,\r\n * when an `input` change leads to a DOM/model mismatch, the change should be\r\n * due to a spellcheck change, and we can incorporate it into our model.\r\n */\nfunction editOnInput(editor) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n  var domSelection = global.getSelection();\n  var anchorNode = domSelection.anchorNode,\n    isCollapsed = domSelection.isCollapsed;\n  var isNotTextNode = anchorNode.nodeType !== Node.TEXT_NODE;\n  var isNotTextOrElementNode = anchorNode.nodeType !== Node.TEXT_NODE && anchorNode.nodeType !== Node.ELEMENT_NODE;\n  if (DraftFeatureFlags.draft_killswitch_allow_nontextnodes) {\n    if (isNotTextNode) {\n      return;\n    }\n  } else {\n    if (isNotTextOrElementNode) {\n      // TODO: (t16149272) figure out context for this change\n      return;\n    }\n  }\n  if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\n    // When typing at the beginning of a visual line, Chrome splits the text\n    // nodes into two. Why? No one knows. This commit is suspicious:\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\n    // To work around, we'll merge the sibling text nodes back into this one.\n    var span = anchorNode.parentNode;\n    anchorNode.nodeValue = span.textContent;\n    for (var child = span.firstChild; child !== null; child = child.nextSibling) {\n      if (child !== anchorNode) {\n        span.removeChild(child);\n      }\n    }\n  }\n  var domText = anchorNode.textContent;\n  var editorState = editor._latestEditorState;\n  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\n  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\n    blockKey = _DraftOffsetKey$decod.blockKey,\n    decoratorKey = _DraftOffsetKey$decod.decoratorKey,\n    leafKey = _DraftOffsetKey$decod.leafKey;\n  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\n    start = _editorState$getBlock.start,\n    end = _editorState$getBlock.end;\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var modelText = block.getText().slice(start, end);\n\n  // Special-case soft newlines here. If the DOM text ends in a soft newline,\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\n  // We want to remove this extra newline for the purpose of our comparison\n  // of DOM and model text.\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\n    domText = domText.slice(0, -1);\n  }\n\n  // No change -- the DOM is up to date. Nothing to do here.\n  if (domText === modelText) {\n    // This can be buggy for some Android keyboards because they don't fire\n    // standard onkeydown/pressed events and only fired editOnInput\n    // so domText is already changed by the browser and ends up being equal\n    // to modelText unexpectedly\n    return;\n  }\n  var selection = editorState.getSelection();\n\n  // We'll replace the entire leaf with the text content of the target.\n  var targetRange = selection.merge({\n    anchorOffset: start,\n    focusOffset: end,\n    isBackward: false\n  });\n  var entityKey = block.getEntityAt(start);\n  var entity = entityKey && content.getEntity(entityKey);\n  var entityType = entity && entity.getMutability();\n  var preserveEntity = entityType === 'MUTABLE';\n\n  // Immutable or segmented entities cannot properly be handled by the\n  // default browser undo, so we have to use a different change type to\n  // force using our internal undo method instead of falling through to the\n  // native browser undo.\n  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\n  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\n  var anchorOffset, focusOffset, startOffset, endOffset;\n  if (isGecko) {\n    // Firefox selection does not change while the context menu is open, so\n    // we preserve the anchor and focus values of the DOM selection.\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    startOffset = start + Math.min(anchorOffset, focusOffset);\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\n    anchorOffset = startOffset;\n    focusOffset = endOffset;\n  } else {\n    // Browsers other than Firefox may adjust DOM selection while the context\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\n    // and adjust it based on the number of characters changed during the\n    // mutation.\n    var charDelta = domText.length - modelText.length;\n    startOffset = selection.getStartOffset();\n    endOffset = selection.getEndOffset();\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\n    focusOffset = endOffset + charDelta;\n  }\n\n  // Segmented entities are completely or partially removed when their\n  // text content changes. For this case we do not want any text to be selected\n  // after the change, so we are not merging the selection.\n  var contentWithAdjustedDOMSelection = newContent.merge({\n    selectionBefore: content.getSelectionAfter(),\n    selectionAfter: selection.merge({\n      anchorOffset: anchorOffset,\n      focusOffset: focusOffset\n    })\n  });\n  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\n}\nmodule.exports = editOnInput;","map":{"version":3,"names":["DraftFeatureFlags","require","DraftModifier","DraftOffsetKey","EditorState","UserAgent","findAncestorOffsetKey","nullthrows","isGecko","isEngine","DOUBLE_NEWLINE","editOnInput","editor","_pendingStateFromBeforeInput","undefined","update","domSelection","global","getSelection","anchorNode","isCollapsed","isNotTextNode","nodeType","Node","TEXT_NODE","isNotTextOrElementNode","ELEMENT_NODE","draft_killswitch_allow_nontextnodes","previousSibling","nextSibling","span","parentNode","nodeValue","textContent","child","firstChild","removeChild","domText","editorState","_latestEditorState","offsetKey","_DraftOffsetKey$decod","decode","blockKey","decoratorKey","leafKey","_editorState$getBlock","getBlockTree","getIn","start","end","content","getCurrentContent","block","getBlockForKey","modelText","getText","slice","endsWith","selection","targetRange","merge","anchorOffset","focusOffset","isBackward","entityKey","getEntityAt","entity","getEntity","entityType","getMutability","preserveEntity","changeType","newContent","replaceText","getInlineStyleAt","startOffset","endOffset","Math","min","abs","charDelta","length","getStartOffset","getEndOffset","contentWithAdjustedDOMSelection","selectionBefore","getSelectionAfter","selectionAfter","push","module","exports"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/draft-js/lib/editOnInput.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnInput\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\r\nvar DraftModifier = require('./DraftModifier');\r\nvar DraftOffsetKey = require('./DraftOffsetKey');\r\nvar EditorState = require('./EditorState');\r\nvar UserAgent = require('fbjs/lib/UserAgent');\r\n\r\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\r\nvar nullthrows = require('fbjs/lib/nullthrows');\r\n\r\nvar isGecko = UserAgent.isEngine('Gecko');\r\n\r\nvar DOUBLE_NEWLINE = '\\n\\n';\r\n\r\n/**\r\n * This function is intended to handle spellcheck and autocorrect changes,\r\n * which occur in the DOM natively without any opportunity to observe or\r\n * interpret the changes before they occur.\r\n *\r\n * The `input` event fires in contentEditable elements reliably for non-IE\r\n * browsers, immediately after changes occur to the editor DOM. Since our other\r\n * handlers override or otherwise handle cover other varieties of text input,\r\n * the DOM state should match the model in all controlled input cases. Thus,\r\n * when an `input` change leads to a DOM/model mismatch, the change should be\r\n * due to a spellcheck change, and we can incorporate it into our model.\r\n */\r\nfunction editOnInput(editor) {\r\n  if (editor._pendingStateFromBeforeInput !== undefined) {\r\n    editor.update(editor._pendingStateFromBeforeInput);\r\n    editor._pendingStateFromBeforeInput = undefined;\r\n  }\r\n\r\n  var domSelection = global.getSelection();\r\n\r\n  var anchorNode = domSelection.anchorNode,\r\n      isCollapsed = domSelection.isCollapsed;\r\n\r\n  var isNotTextNode = anchorNode.nodeType !== Node.TEXT_NODE;\r\n  var isNotTextOrElementNode = anchorNode.nodeType !== Node.TEXT_NODE && anchorNode.nodeType !== Node.ELEMENT_NODE;\r\n\r\n  if (DraftFeatureFlags.draft_killswitch_allow_nontextnodes) {\r\n    if (isNotTextNode) {\r\n      return;\r\n    }\r\n  } else {\r\n    if (isNotTextOrElementNode) {\r\n      // TODO: (t16149272) figure out context for this change\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\r\n    // When typing at the beginning of a visual line, Chrome splits the text\r\n    // nodes into two. Why? No one knows. This commit is suspicious:\r\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\r\n    // To work around, we'll merge the sibling text nodes back into this one.\r\n    var span = anchorNode.parentNode;\r\n    anchorNode.nodeValue = span.textContent;\r\n    for (var child = span.firstChild; child !== null; child = child.nextSibling) {\r\n      if (child !== anchorNode) {\r\n        span.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  var domText = anchorNode.textContent;\r\n  var editorState = editor._latestEditorState;\r\n  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\r\n\r\n  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\r\n      blockKey = _DraftOffsetKey$decod.blockKey,\r\n      decoratorKey = _DraftOffsetKey$decod.decoratorKey,\r\n      leafKey = _DraftOffsetKey$decod.leafKey;\r\n\r\n  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\r\n      start = _editorState$getBlock.start,\r\n      end = _editorState$getBlock.end;\r\n\r\n  var content = editorState.getCurrentContent();\r\n  var block = content.getBlockForKey(blockKey);\r\n  var modelText = block.getText().slice(start, end);\r\n\r\n  // Special-case soft newlines here. If the DOM text ends in a soft newline,\r\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\r\n  // We want to remove this extra newline for the purpose of our comparison\r\n  // of DOM and model text.\r\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\r\n    domText = domText.slice(0, -1);\r\n  }\r\n\r\n  // No change -- the DOM is up to date. Nothing to do here.\r\n  if (domText === modelText) {\r\n    // This can be buggy for some Android keyboards because they don't fire\r\n    // standard onkeydown/pressed events and only fired editOnInput\r\n    // so domText is already changed by the browser and ends up being equal\r\n    // to modelText unexpectedly\r\n    return;\r\n  }\r\n\r\n  var selection = editorState.getSelection();\r\n\r\n  // We'll replace the entire leaf with the text content of the target.\r\n  var targetRange = selection.merge({\r\n    anchorOffset: start,\r\n    focusOffset: end,\r\n    isBackward: false\r\n  });\r\n\r\n  var entityKey = block.getEntityAt(start);\r\n  var entity = entityKey && content.getEntity(entityKey);\r\n  var entityType = entity && entity.getMutability();\r\n  var preserveEntity = entityType === 'MUTABLE';\r\n\r\n  // Immutable or segmented entities cannot properly be handled by the\r\n  // default browser undo, so we have to use a different change type to\r\n  // force using our internal undo method instead of falling through to the\r\n  // native browser undo.\r\n  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\r\n\r\n  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\r\n\r\n  var anchorOffset, focusOffset, startOffset, endOffset;\r\n\r\n  if (isGecko) {\r\n    // Firefox selection does not change while the context menu is open, so\r\n    // we preserve the anchor and focus values of the DOM selection.\r\n    anchorOffset = domSelection.anchorOffset;\r\n    focusOffset = domSelection.focusOffset;\r\n    startOffset = start + Math.min(anchorOffset, focusOffset);\r\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\r\n    anchorOffset = startOffset;\r\n    focusOffset = endOffset;\r\n  } else {\r\n    // Browsers other than Firefox may adjust DOM selection while the context\r\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\r\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\r\n    // and adjust it based on the number of characters changed during the\r\n    // mutation.\r\n    var charDelta = domText.length - modelText.length;\r\n    startOffset = selection.getStartOffset();\r\n    endOffset = selection.getEndOffset();\r\n\r\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\r\n    focusOffset = endOffset + charDelta;\r\n  }\r\n\r\n  // Segmented entities are completely or partially removed when their\r\n  // text content changes. For this case we do not want any text to be selected\r\n  // after the change, so we are not merging the selection.\r\n  var contentWithAdjustedDOMSelection = newContent.merge({\r\n    selectionBefore: content.getSelectionAfter(),\r\n    selectionAfter: selection.merge({ anchorOffset: anchorOffset, focusOffset: focusOffset })\r\n  });\r\n\r\n  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\r\n}\r\n\r\nmodule.exports = editOnInput;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}