{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftPasteProcessor\r\n * @format\r\n * \r\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar Immutable = require('immutable');\nvar convertFromHTMLtoContentBlocks = require('./convertFromHTMLToContentBlocks');\nvar generateRandomKey = require('./generateRandomKey');\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\nvar sanitizeDraftText = require('./sanitizeDraftText');\nvar List = Immutable.List,\n  Repeat = Immutable.Repeat;\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar DraftPasteProcessor = {\n  processHTML: function processHTML(html, blockRenderMap) {\n    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\n  },\n  processText: function processText(textBlocks, character, type) {\n    return textBlocks.reduce(function (acc, textLine, index) {\n      textLine = sanitizeDraftText(textLine);\n      var key = generateRandomKey();\n      var blockNodeConfig = {\n        key: key,\n        type: type,\n        text: textLine,\n        characterList: List(Repeat(character, textLine.length))\n      };\n\n      // next block updates previous block\n      if (experimentalTreeDataSupport && index !== 0) {\n        var prevSiblingIndex = index - 1;\n        // update previous block\n        var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\n          nextSibling: key\n        });\n        blockNodeConfig = _extends({}, blockNodeConfig, {\n          prevSibling: previousBlock.getKey()\n        });\n      }\n      acc.push(new ContentBlockRecord(blockNodeConfig));\n      return acc;\n    }, []);\n  }\n};\nmodule.exports = DraftPasteProcessor;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","CharacterMetadata","ContentBlock","ContentBlockNode","DraftFeatureFlags","Immutable","convertFromHTMLtoContentBlocks","generateRandomKey","getSafeBodyFromHTML","sanitizeDraftText","List","Repeat","experimentalTreeDataSupport","draft_tree_data_support","ContentBlockRecord","DraftPasteProcessor","processHTML","html","blockRenderMap","processText","textBlocks","character","type","reduce","acc","textLine","index","blockNodeConfig","text","characterList","prevSiblingIndex","previousBlock","merge","nextSibling","prevSibling","getKey","push","module","exports"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/draft-js/lib/DraftPasteProcessor.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftPasteProcessor\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar _assign = require('object-assign');\r\n\r\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar CharacterMetadata = require('./CharacterMetadata');\r\nvar ContentBlock = require('./ContentBlock');\r\nvar ContentBlockNode = require('./ContentBlockNode');\r\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\r\nvar Immutable = require('immutable');\r\n\r\nvar convertFromHTMLtoContentBlocks = require('./convertFromHTMLToContentBlocks');\r\nvar generateRandomKey = require('./generateRandomKey');\r\nvar getSafeBodyFromHTML = require('./getSafeBodyFromHTML');\r\nvar sanitizeDraftText = require('./sanitizeDraftText');\r\n\r\nvar List = Immutable.List,\r\n    Repeat = Immutable.Repeat;\r\n\r\n\r\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\r\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\r\n\r\nvar DraftPasteProcessor = {\r\n  processHTML: function processHTML(html, blockRenderMap) {\r\n    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\r\n  },\r\n  processText: function processText(textBlocks, character, type) {\r\n    return textBlocks.reduce(function (acc, textLine, index) {\r\n      textLine = sanitizeDraftText(textLine);\r\n      var key = generateRandomKey();\r\n\r\n      var blockNodeConfig = {\r\n        key: key,\r\n        type: type,\r\n        text: textLine,\r\n        characterList: List(Repeat(character, textLine.length))\r\n      };\r\n\r\n      // next block updates previous block\r\n      if (experimentalTreeDataSupport && index !== 0) {\r\n        var prevSiblingIndex = index - 1;\r\n        // update previous block\r\n        var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\r\n          nextSibling: key\r\n        });\r\n        blockNodeConfig = _extends({}, blockNodeConfig, {\r\n          prevSibling: previousBlock.getKey()\r\n        });\r\n      }\r\n\r\n      acc.push(new ContentBlockRecord(blockNodeConfig));\r\n\r\n      return acc;\r\n    }, []);\r\n  }\r\n};\r\n\r\nmodule.exports = DraftPasteProcessor;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}