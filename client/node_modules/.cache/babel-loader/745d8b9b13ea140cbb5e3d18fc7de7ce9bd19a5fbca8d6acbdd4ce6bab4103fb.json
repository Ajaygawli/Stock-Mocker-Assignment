{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftEditorTextNode.react\r\n * @format\r\n * \r\n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar UserAgent = require('fbjs/lib/UserAgent');\nvar invariant = require('fbjs/lib/invariant');\n\n// In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\n\n/**\r\n * Check whether the node should be considered a newline.\r\n */\nfunction isNewline(node) {\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\n}\n\n/**\r\n * Placeholder elements for empty text content.\r\n *\r\n * What is this `data-text` attribute, anyway? It turns out that we need to\r\n * put an attribute on the lowest-level text node in order to preserve correct\r\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\r\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\r\n * If the <span> has an attribute, this appears not to happen.\r\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\r\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\r\n */\nvar NEWLINE_A = useNewlineChar ? React.createElement('span', {\n  key: 'A',\n  'data-text': 'true'\n}, '\\n') : React.createElement('br', {\n  key: 'A',\n  'data-text': 'true'\n});\nvar NEWLINE_B = useNewlineChar ? React.createElement('span', {\n  key: 'B',\n  'data-text': 'true'\n}, '\\n') : React.createElement('br', {\n  key: 'B',\n  'data-text': 'true'\n});\n\n/**\r\n * The lowest-level component in a `DraftEditor`, the text node component\r\n * replaces the default React text node implementation. This allows us to\r\n * perform custom handling of newline behavior and avoid re-rendering text\r\n * nodes with DOM state that already matches the expectations of our immutable\r\n * editor state.\r\n */\nvar DraftEditorTextNode = function (_React$Component) {\n  _inherits(DraftEditorTextNode, _React$Component);\n  function DraftEditorTextNode(props) {\n    _classCallCheck(this, DraftEditorTextNode);\n\n    // By flipping this flag, we also keep flipping keys which forces\n    // React to remount this node every time it rerenders.\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n    _this._forceFlag = false;\n    return _this;\n  }\n  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var node = ReactDOM.findDOMNode(this);\n    var shouldBeNewline = nextProps.children === '';\n    !(node instanceof Element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\n    if (shouldBeNewline) {\n      return !isNewline(node);\n    }\n    return node.textContent !== nextProps.children;\n  };\n  DraftEditorTextNode.prototype.componentDidMount = function componentDidMount() {\n    this._forceFlag = !this._forceFlag;\n  };\n  DraftEditorTextNode.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._forceFlag = !this._forceFlag;\n  };\n  DraftEditorTextNode.prototype.render = function render() {\n    if (this.props.children === '') {\n      return this._forceFlag ? NEWLINE_A : NEWLINE_B;\n    }\n    return React.createElement('span', {\n      key: this._forceFlag ? 'A' : 'B',\n      'data-text': 'true'\n    }, this.props.children);\n  };\n  return DraftEditorTextNode;\n}(React.Component);\nmodule.exports = DraftEditorTextNode;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","require","ReactDOM","UserAgent","invariant","useNewlineChar","isBrowser","isNewline","node","textContent","tagName","NEWLINE_A","createElement","key","NEWLINE_B","DraftEditorTextNode","_React$Component","props","_this","_forceFlag","shouldComponentUpdate","nextProps","findDOMNode","shouldBeNewline","children","Element","process","env","NODE_ENV","componentDidMount","componentDidUpdate","render","Component","module","exports"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/draft-js/lib/DraftEditorTextNode.react.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftEditorTextNode.react\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\nvar React = require('react');\r\nvar ReactDOM = require('react-dom');\r\nvar UserAgent = require('fbjs/lib/UserAgent');\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\n// In IE, spans with <br> tags render as two newlines. By rendering a span\r\n// with only a newline character, we can be sure to render a single line.\r\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\r\n\r\n/**\r\n * Check whether the node should be considered a newline.\r\n */\r\nfunction isNewline(node) {\r\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\r\n}\r\n\r\n/**\r\n * Placeholder elements for empty text content.\r\n *\r\n * What is this `data-text` attribute, anyway? It turns out that we need to\r\n * put an attribute on the lowest-level text node in order to preserve correct\r\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\r\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\r\n * If the <span> has an attribute, this appears not to happen.\r\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\r\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\r\n */\r\nvar NEWLINE_A = useNewlineChar ? React.createElement(\r\n  'span',\r\n  { key: 'A', 'data-text': 'true' },\r\n  '\\n'\r\n) : React.createElement('br', { key: 'A', 'data-text': 'true' });\r\n\r\nvar NEWLINE_B = useNewlineChar ? React.createElement(\r\n  'span',\r\n  { key: 'B', 'data-text': 'true' },\r\n  '\\n'\r\n) : React.createElement('br', { key: 'B', 'data-text': 'true' });\r\n\r\n/**\r\n * The lowest-level component in a `DraftEditor`, the text node component\r\n * replaces the default React text node implementation. This allows us to\r\n * perform custom handling of newline behavior and avoid re-rendering text\r\n * nodes with DOM state that already matches the expectations of our immutable\r\n * editor state.\r\n */\r\nvar DraftEditorTextNode = function (_React$Component) {\r\n  _inherits(DraftEditorTextNode, _React$Component);\r\n\r\n  function DraftEditorTextNode(props) {\r\n    _classCallCheck(this, DraftEditorTextNode);\r\n\r\n    // By flipping this flag, we also keep flipping keys which forces\r\n    // React to remount this node every time it rerenders.\r\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\r\n\r\n    _this._forceFlag = false;\r\n    return _this;\r\n  }\r\n\r\n  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\r\n    var node = ReactDOM.findDOMNode(this);\r\n    var shouldBeNewline = nextProps.children === '';\r\n    !(node instanceof Element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\r\n    if (shouldBeNewline) {\r\n      return !isNewline(node);\r\n    }\r\n    return node.textContent !== nextProps.children;\r\n  };\r\n\r\n  DraftEditorTextNode.prototype.componentDidMount = function componentDidMount() {\r\n    this._forceFlag = !this._forceFlag;\r\n  };\r\n\r\n  DraftEditorTextNode.prototype.componentDidUpdate = function componentDidUpdate() {\r\n    this._forceFlag = !this._forceFlag;\r\n  };\r\n\r\n  DraftEditorTextNode.prototype.render = function render() {\r\n    if (this.props.children === '') {\r\n      return this._forceFlag ? NEWLINE_A : NEWLINE_B;\r\n    }\r\n    return React.createElement(\r\n      'span',\r\n      { key: this._forceFlag ? 'A' : 'B', 'data-text': 'true' },\r\n      this.props.children\r\n    );\r\n  };\r\n\r\n  return DraftEditorTextNode;\r\n}(React.Component);\r\n\r\nmodule.exports = DraftEditorTextNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}