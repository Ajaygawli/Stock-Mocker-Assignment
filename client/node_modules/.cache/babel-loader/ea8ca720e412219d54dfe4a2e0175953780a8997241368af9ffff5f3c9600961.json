{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnCopy\r\n * @format\r\n * \r\n */\n\n'use strict';\n\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\n\n/**\r\n * If we have a selection, create a ContentState fragment and store\r\n * it in our internal clipboard. Subsequent paste events will use this\r\n * fragment if no external clipboard data is supplied.\r\n */\nfunction editOnCopy(editor, e) {\n  var editorState = editor._latestEditorState;\n  var selection = editorState.getSelection();\n\n  // No selection, so there's nothing to copy.\n  if (selection.isCollapsed()) {\n    e.preventDefault();\n    return;\n  }\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\nmodule.exports = editOnCopy;","map":{"version":3,"names":["getFragmentFromSelection","require","editOnCopy","editor","e","editorState","_latestEditorState","selection","getSelection","isCollapsed","preventDefault","setClipboard","module","exports"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/draft-js/lib/editOnCopy.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnCopy\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar getFragmentFromSelection = require('./getFragmentFromSelection');\r\n\r\n/**\r\n * If we have a selection, create a ContentState fragment and store\r\n * it in our internal clipboard. Subsequent paste events will use this\r\n * fragment if no external clipboard data is supplied.\r\n */\r\nfunction editOnCopy(editor, e) {\r\n  var editorState = editor._latestEditorState;\r\n  var selection = editorState.getSelection();\r\n\r\n  // No selection, so there's nothing to copy.\r\n  if (selection.isCollapsed()) {\r\n    e.preventDefault();\r\n    return;\r\n  }\r\n\r\n  editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\r\n}\r\n\r\nmodule.exports = editOnCopy;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,wBAAwB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,MAAM,EAAEC,CAAC,EAAE;EAC7B,IAAIC,WAAW,GAAGF,MAAM,CAACG,kBAAkB;EAC3C,IAAIC,SAAS,GAAGF,WAAW,CAACG,YAAY,EAAE;;EAE1C;EACA,IAAID,SAAS,CAACE,WAAW,EAAE,EAAE;IAC3BL,CAAC,CAACM,cAAc,EAAE;IAClB;EACF;EAEAP,MAAM,CAACQ,YAAY,CAACX,wBAAwB,CAACG,MAAM,CAACG,kBAAkB,CAAC,CAAC;AAC1E;AAEAM,MAAM,CAACC,OAAO,GAAGX,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}