{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport SelectNode from './SelectNode';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n    current = current.parentNode;\n  }\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    labelInValue = props.labelInValue;\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n    pos = _ref2.pos,\n    children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities) {\n  if (!searchValue) {\n    return null;\n  }\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n    if (children.length || match) {\n      return React.createElement(SelectNode, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n    return null;\n  }\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n      return val;\n    });\n  }\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n    treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n          children = _ref5.children;\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n    label = props.label,\n    key = props.key,\n    value = props.value;\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n    cloneProps.title = label;\n  }\n  if (!key) {\n    cloneProps.key = value;\n  }\n  return cloneProps;\n}\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n  wrapper.valueEntities[value] = entity;\n}\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectSpread","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","obj","value","defineProperty","configurable","writable","React","warning","convertDataToTree","rcConvertDataToTree","convertTreeToEntities","rcConvertTreeToEntities","conductCheck","rcConductCheck","toNodeArray","hasClass","SelectNode","SHOW_CHILD","SHOW_PARENT","warnDeprecatedLabel","findPopupContainer","node","prefixClass","current","parentNode","toTitle","title","toArray","data","undefined","Array","isArray","createRef","func","setRef","UNSELECTABLE_STYLE","userSelect","WebkitUserSelect","UNSELECTABLE_ATTRIBUTE","unselectable","flatToHierarchy","positionList","entrances","posMap","parsedList","slice","map","entity","clone","fields","pos","split","children","sort","a","b","parentPos","join","parentEntity","push","ariaId","resetAriaId","generateAriaId","prefix","isLabelInValue","props","treeCheckable","treeCheckStrictly","labelInValue","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","parentKey","parent","isPosRelated","pos1","pos2","fields1","fields2","minLen","Math","min","cleanEntity","_ref2","instance","getFilterTree","treeNodes","searchValue","filterFunc","valueEntities","mapFilteredNodeToData","match","n","createElement","formatInternalValue","valueList","val","label","getLabel","wrappedValue","treeNodeLabelProp","formatSelectorValue","showCheckedStrategy","values","hierarchyList","_ref3","_ref4","targetValueList","traverse","_ref5","processProps","cloneProps","initWrapper","wrapper","processEntity","currentEntity","getHalfCheckedKeys","_ref6","_ref7","parentValue"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/rc-tree-select/es/util.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport SelectNode from './SelectNode';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return React.createElement(SelectNode, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n            children = _ref5.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}