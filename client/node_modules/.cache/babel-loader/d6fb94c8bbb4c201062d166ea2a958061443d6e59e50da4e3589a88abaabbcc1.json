{"ast":null,"code":"import { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n  function processNode(node) {\n    var key = node.key,\n      children = node.props.children;\n    if (callback(key) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n  nodeList.forEach(processNode);\n}\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n    keyEntities = _convertTreeToEntitie.keyEntities;\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n    return true;\n  });\n  return keys;\n}","map":{"version":3,"names":["getNodeChildren","convertTreeToEntities","Record","traverseNodesKey","rootChildren","callback","nodeList","processNode","node","key","children","props","forEach","getFullKeyList","_convertTreeToEntitie","keyEntities","Object","keys","calcRangeKeys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/antd/es/tree/util.js"],"sourcesContent":["import { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\r\nvar Record;\r\n\r\n(function (Record) {\r\n  Record[Record[\"None\"] = 0] = \"None\";\r\n  Record[Record[\"Start\"] = 1] = \"Start\";\r\n  Record[Record[\"End\"] = 2] = \"End\";\r\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\r\n\r\n\r\nfunction traverseNodesKey(rootChildren, callback) {\r\n  var nodeList = getNodeChildren(rootChildren) || [];\r\n\r\n  function processNode(node) {\r\n    var key = node.key,\r\n        children = node.props.children;\r\n\r\n    if (callback(key) !== false) {\r\n      traverseNodesKey(children, callback);\r\n    }\r\n  }\r\n\r\n  nodeList.forEach(processNode);\r\n}\r\n\r\nexport function getFullKeyList(children) {\r\n  var _convertTreeToEntitie = convertTreeToEntities(children),\r\n      keyEntities = _convertTreeToEntitie.keyEntities;\r\n\r\n  return Object.keys(keyEntities);\r\n}\r\n/** 计算选中范围，只考虑expanded情况以优化性能 */\r\n\r\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\r\n  var keys = [];\r\n  var record = Record.None;\r\n\r\n  if (startKey && startKey === endKey) {\r\n    return [startKey];\r\n  }\r\n\r\n  if (!startKey || !endKey) {\r\n    return [];\r\n  }\r\n\r\n  function matchKey(key) {\r\n    return key === startKey || key === endKey;\r\n  }\r\n\r\n  traverseNodesKey(rootChildren, function (key) {\r\n    if (record === Record.End) {\r\n      return false;\r\n    }\r\n\r\n    if (matchKey(key)) {\r\n      // Match test\r\n      keys.push(key);\r\n\r\n      if (record === Record.None) {\r\n        record = Record.Start;\r\n      } else if (record === Record.Start) {\r\n        record = Record.End;\r\n        return false;\r\n      }\r\n    } else if (record === Record.Start) {\r\n      // Append selection\r\n      keys.push(key);\r\n    }\r\n\r\n    if (expandedKeys.indexOf(key) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  });\r\n  return keys;\r\n}"],"mappings":"AAAA,SAASA,eAAe,EAAEC,qBAAqB,QAAQ,iBAAiB;AACxE,IAAIC,MAAM;AAEV,CAAC,UAAUA,MAAM,EAAE;EACjBA,MAAM,CAACA,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACnCA,MAAM,CAACA,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACrCA,MAAM,CAACA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACnC,CAAC,EAAEA,MAAM,KAAKA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAG7B,SAASC,gBAAgBA,CAACC,YAAY,EAAEC,QAAQ,EAAE;EAChD,IAAIC,QAAQ,GAAGN,eAAe,CAACI,YAAY,CAAC,IAAI,EAAE;EAElD,SAASG,WAAWA,CAACC,IAAI,EAAE;IACzB,IAAIC,GAAG,GAAGD,IAAI,CAACC,GAAG;MACdC,QAAQ,GAAGF,IAAI,CAACG,KAAK,CAACD,QAAQ;IAElC,IAAIL,QAAQ,CAACI,GAAG,CAAC,KAAK,KAAK,EAAE;MAC3BN,gBAAgB,CAACO,QAAQ,EAAEL,QAAQ,CAAC;IACtC;EACF;EAEAC,QAAQ,CAACM,OAAO,CAACL,WAAW,CAAC;AAC/B;AAEA,OAAO,SAASM,cAAcA,CAACH,QAAQ,EAAE;EACvC,IAAII,qBAAqB,GAAGb,qBAAqB,CAACS,QAAQ,CAAC;IACvDK,WAAW,GAAGD,qBAAqB,CAACC,WAAW;EAEnD,OAAOC,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC;AACjC;AACA;;AAEA,OAAO,SAASG,aAAaA,CAACd,YAAY,EAAEe,YAAY,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAC1E,IAAIJ,IAAI,GAAG,EAAE;EACb,IAAIK,MAAM,GAAGpB,MAAM,CAACqB,IAAI;EAExB,IAAIH,QAAQ,IAAIA,QAAQ,KAAKC,MAAM,EAAE;IACnC,OAAO,CAACD,QAAQ,CAAC;EACnB;EAEA,IAAI,CAACA,QAAQ,IAAI,CAACC,MAAM,EAAE;IACxB,OAAO,EAAE;EACX;EAEA,SAASG,QAAQA,CAACf,GAAG,EAAE;IACrB,OAAOA,GAAG,KAAKW,QAAQ,IAAIX,GAAG,KAAKY,MAAM;EAC3C;EAEAlB,gBAAgB,CAACC,YAAY,EAAE,UAAUK,GAAG,EAAE;IAC5C,IAAIa,MAAM,KAAKpB,MAAM,CAACuB,GAAG,EAAE;MACzB,OAAO,KAAK;IACd;IAEA,IAAID,QAAQ,CAACf,GAAG,CAAC,EAAE;MACjB;MACAQ,IAAI,CAACS,IAAI,CAACjB,GAAG,CAAC;MAEd,IAAIa,MAAM,KAAKpB,MAAM,CAACqB,IAAI,EAAE;QAC1BD,MAAM,GAAGpB,MAAM,CAACyB,KAAK;MACvB,CAAC,MAAM,IAAIL,MAAM,KAAKpB,MAAM,CAACyB,KAAK,EAAE;QAClCL,MAAM,GAAGpB,MAAM,CAACuB,GAAG;QACnB,OAAO,KAAK;MACd;IACF,CAAC,MAAM,IAAIH,MAAM,KAAKpB,MAAM,CAACyB,KAAK,EAAE;MAClC;MACAV,IAAI,CAACS,IAAI,CAACjB,GAAG,CAAC;IAChB;IAEA,IAAIU,YAAY,CAACS,OAAO,CAACnB,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACpC,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC,CAAC;EACF,OAAOQ,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}