{"ast":null,"code":"function loopFiles(item, callback) {\n  var dirReader = item.createReader();\n  var fileList = [];\n  function sequence() {\n    dirReader.readEntries(function (entries) {\n      var entryList = Array.prototype.slice.apply(entries);\n      fileList = fileList.concat(entryList);\n\n      // Check if all the file has been viewed\n      var isFinished = !entryList.length;\n      if (isFinished) {\n        callback(fileList);\n      } else {\n        sequence();\n      }\n    });\n  }\n  sequence();\n}\nvar traverseFileTree = function traverseFileTree(files, callback, isAccepted) {\n  var _traverseFileTree = function _traverseFileTree(item, path) {\n    path = path || '';\n    if (item.isFile) {\n      item.file(function (file) {\n        if (isAccepted(file)) {\n          callback([file]);\n        }\n      });\n    } else if (item.isDirectory) {\n      loopFiles(item, function (entries) {\n        entries.forEach(function (entryItem) {\n          _traverseFileTree(entryItem, '' + path + item.name + '/');\n        });\n      });\n    }\n  };\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var file = _step.value;\n      _traverseFileTree(file.webkitGetAsEntry());\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator['return']) {\n        _iterator['return']();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\nexport default traverseFileTree;","map":{"version":3,"names":["loopFiles","item","callback","dirReader","createReader","fileList","sequence","readEntries","entries","entryList","Array","prototype","slice","apply","concat","isFinished","length","traverseFileTree","files","isAccepted","_traverseFileTree","path","isFile","file","isDirectory","forEach","entryItem","name","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","value","webkitGetAsEntry","err"],"sources":["C:/Users/ajayg/Desktop/vssample/stock_mocker/client/node_modules/rc-upload/es/traverseFileTree.js"],"sourcesContent":["function loopFiles(item, callback) {\r\n  var dirReader = item.createReader();\r\n  var fileList = [];\r\n\r\n  function sequence() {\r\n    dirReader.readEntries(function (entries) {\r\n      var entryList = Array.prototype.slice.apply(entries);\r\n      fileList = fileList.concat(entryList);\r\n\r\n      // Check if all the file has been viewed\r\n      var isFinished = !entryList.length;\r\n\r\n      if (isFinished) {\r\n        callback(fileList);\r\n      } else {\r\n        sequence();\r\n      }\r\n    });\r\n  }\r\n\r\n  sequence();\r\n}\r\n\r\nvar traverseFileTree = function traverseFileTree(files, callback, isAccepted) {\r\n  var _traverseFileTree = function _traverseFileTree(item, path) {\r\n    path = path || '';\r\n    if (item.isFile) {\r\n      item.file(function (file) {\r\n        if (isAccepted(file)) {\r\n          callback([file]);\r\n        }\r\n      });\r\n    } else if (item.isDirectory) {\r\n      loopFiles(item, function (entries) {\r\n        entries.forEach(function (entryItem) {\r\n          _traverseFileTree(entryItem, '' + path + item.name + '/');\r\n        });\r\n      });\r\n    }\r\n  };\r\n  var _iteratorNormalCompletion = true;\r\n  var _didIteratorError = false;\r\n  var _iteratorError = undefined;\r\n\r\n  try {\r\n    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\r\n      var file = _step.value;\r\n\r\n      _traverseFileTree(file.webkitGetAsEntry());\r\n    }\r\n  } catch (err) {\r\n    _didIteratorError = true;\r\n    _iteratorError = err;\r\n  } finally {\r\n    try {\r\n      if (!_iteratorNormalCompletion && _iterator['return']) {\r\n        _iterator['return']();\r\n      }\r\n    } finally {\r\n      if (_didIteratorError) {\r\n        throw _iteratorError;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default traverseFileTree;"],"mappings":"AAAA,SAASA,SAASA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACjC,IAAIC,SAAS,GAAGF,IAAI,CAACG,YAAY,EAAE;EACnC,IAAIC,QAAQ,GAAG,EAAE;EAEjB,SAASC,QAAQA,CAAA,EAAG;IAClBH,SAAS,CAACI,WAAW,CAAC,UAAUC,OAAO,EAAE;MACvC,IAAIC,SAAS,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,KAAK,CAACL,OAAO,CAAC;MACpDH,QAAQ,GAAGA,QAAQ,CAACS,MAAM,CAACL,SAAS,CAAC;;MAErC;MACA,IAAIM,UAAU,GAAG,CAACN,SAAS,CAACO,MAAM;MAElC,IAAID,UAAU,EAAE;QACdb,QAAQ,CAACG,QAAQ,CAAC;MACpB,CAAC,MAAM;QACLC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;EACJ;EAEAA,QAAQ,EAAE;AACZ;AAEA,IAAIW,gBAAgB,GAAG,SAASA,gBAAgBA,CAACC,KAAK,EAAEhB,QAAQ,EAAEiB,UAAU,EAAE;EAC5E,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACnB,IAAI,EAAEoB,IAAI,EAAE;IAC7DA,IAAI,GAAGA,IAAI,IAAI,EAAE;IACjB,IAAIpB,IAAI,CAACqB,MAAM,EAAE;MACfrB,IAAI,CAACsB,IAAI,CAAC,UAAUA,IAAI,EAAE;QACxB,IAAIJ,UAAU,CAACI,IAAI,CAAC,EAAE;UACpBrB,QAAQ,CAAC,CAACqB,IAAI,CAAC,CAAC;QAClB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAItB,IAAI,CAACuB,WAAW,EAAE;MAC3BxB,SAAS,CAACC,IAAI,EAAE,UAAUO,OAAO,EAAE;QACjCA,OAAO,CAACiB,OAAO,CAAC,UAAUC,SAAS,EAAE;UACnCN,iBAAiB,CAACM,SAAS,EAAE,EAAE,GAAGL,IAAI,GAAGpB,IAAI,CAAC0B,IAAI,GAAG,GAAG,CAAC;QAC3D,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;EACD,IAAIC,yBAAyB,GAAG,IAAI;EACpC,IAAIC,iBAAiB,GAAG,KAAK;EAC7B,IAAIC,cAAc,GAAGC,SAAS;EAE9B,IAAI;IACF,KAAK,IAAIC,SAAS,GAAGd,KAAK,CAACe,MAAM,CAACC,QAAQ,CAAC,EAAE,EAAEC,KAAK,EAAE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAI,EAAE,EAAEC,IAAI,CAAC,EAAET,yBAAyB,GAAG,IAAI,EAAE;MACtJ,IAAIL,IAAI,GAAGY,KAAK,CAACG,KAAK;MAEtBlB,iBAAiB,CAACG,IAAI,CAACgB,gBAAgB,EAAE,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZX,iBAAiB,GAAG,IAAI;IACxBC,cAAc,GAAGU,GAAG;EACtB,CAAC,SAAS;IACR,IAAI;MACF,IAAI,CAACZ,yBAAyB,IAAII,SAAS,CAAC,QAAQ,CAAC,EAAE;QACrDA,SAAS,CAAC,QAAQ,CAAC,EAAE;MACvB;IACF,CAAC,SAAS;MACR,IAAIH,iBAAiB,EAAE;QACrB,MAAMC,cAAc;MACtB;IACF;EACF;AACF,CAAC;AAED,eAAeb,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}